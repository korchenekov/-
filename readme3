# Алгоритмы и структуры данных: сортировка и поиск

В этом документе представлены основные алгоритмы сортировки и поиска.

## Алгоритмы сортировки

### Сортировка выбором (Selection Sort)
- **Определение:** Алгоритм, который находит минимальный элемент в неотсортированной части массива и помещает его в начало
- **Сложность:** O(n²)
- **Пример:** `[23, 56, 21, 41, 12] → [12, 21, 23, 41, 56]`

### Сортировка пузырьком (Bubble Sort)
- **Определение:** Алгоритм, который сравнивает и меняет местами соседние элементы
- **Сложность:** O(n²) в худшем случае, O(n) в лучшем
- **Пример:** `[64, 34, 25, 12, 22, 11, 90] → [11, 12, 22, 25, 34, 64, 90]`

### Сортировка вставками (Insertion Sort)
- **Определение:** Алгоритм, который вставляет каждый элемент в правильную позицию в отсортированной части
- **Сложность:** O(n²) в худшем случае, O(n) в лучшем
- **Пример:** `[15, 8, 42, 4, 23, 16] → [4, 8, 15, 16, 23, 42]`

### Сортировка слиянием (Merge Sort)
- **Определение:** Алгоритм "разделяй и властвуй", который делит массив на части и объединяет их
- **Сложность:** O(n log n)
- **Пример:** `[38, 27, 43, 3, 9, 82, 10] → [3, 9, 10, 27, 38, 43, 82]`

### Быстрая сортировка (Quick Sort)
- **Определение:** Алгоритм "разделяй и властвуй" с опорным элементом
- **Сложность:** O(n log n) в среднем, O(n²) в худшем случае
- **Пример:** `[24, 15, 38, 2, 19, 41, 8] → [2, 8, 15, 19, 24, 38, 41]`

### Пирамидальная сортировка (Heap Sort)
- **Определение:** Алгоритм, использующий структуру данных "куча"
- **Сложность:** O(n log n)
- **Пример:** `[4, 10, 3, 5, 1] → [1, 3, 4, 5, 10]`

### Сортировка Шелла (Shell Sort)
- **Определение:** Улучшенная версия сортировки вставками с использованием шага
- **Сложность:** O(n log n) в среднем
- **Пример:** `[23, 12, 1, 8, 34, 54, 2, 3] → [1, 2, 3, 8, 12, 23, 34, 54]`

## Алгоритмы поиска

### Линейный поиск (Linear Search)
- **Определение:** Последовательная проверка каждого элемента
- **Сложность:** O(n)
- **Пример:** В массиве `[2, 5, 8, 12, 16, 23]` элемент 16 найден на позиции 4

### Бинарный поиск (Binary Search)
- **Определение:** Поиск в отсортированном массиве с делением пополам
- **Сложность:** O(log n)
- **Пример:** В массиве `[3, 7, 14, 21, 29, 33]` элемент 29 найден на позиции 4

### Интерполяционный поиск (Interpolation Search)
- **Определение:** Улучшенный бинарный поиск для равномерно распределенных данных
- **Сложность:** O(log log n) в среднем, O(n) в худшем случае
- **Пример:** В массиве `[10, 20, 30, 40, 50, 60]` элемент 60 найден на позиции 5

### Поиск Фибоначчи (Fibonacci Search)
- **Определение:** Алгоритм, использующий числа Фибоначчи для разделения массива
- **Сложность:** O(log n)
- **Пример:** В массиве `[10, 22, 35, 40, 45, 50, 80, 82, 85]` элемент 85 найден на позиции 8

## Сравнительная таблица сортировок

| Алгоритм | Лучший случай | Средний случай | Худший случай | Память |
|----------|---------------|----------------|---------------|--------|
| Selection Sort | O(n²) | O(n²) | O(n²) | O(1) |
| Bubble Sort | O(n) | O(n²) | O(n²) | O(1) |
| Insertion Sort | O(n) | O(n²) | O(n²) | O(1) |
| Merge Sort | O(n log n) | O(n log n) | O(n log n) | O(n) |
| Quick Sort | O(n log n) | O(n log n) | O(n²) | O(log n) |
| Heap Sort | O(n log n) | O(n log n) | O(n log n) | O(1) |
| Shell Sort | O(n log n) | O(n log n) | O(n²) | O(1) |

## Сравнительная таблица поиска

| Алгоритм | Лучший случай | Средний случай | Худший случай | Условия |
|----------|---------------|----------------|---------------|---------|
| Linear Search | O(1) | O(n) | O(n) | Любой массив |
| Binary Search | O(1) | O(log n) | O(log n) | Отсортированный |
| Interpolation Search | O(1) | O(log log n) | O(n) | Равномерное распределение |
| Fibonacci Search | O(1) | O(log n) | O(log n) | Отсортированный |
